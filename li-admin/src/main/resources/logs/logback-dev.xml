<?xml version="1.0" encoding="UTF-8"?>
<!--debug=true等同于配置一个OnConsoleStatusListener ，用于在解析配置文件错误时，输出内部状态日志
    该配置不会影响log本身，也不会影响日志级别-->
<configuration>

    <!-- 定义日志文件的存储地址 -->
    <property name="LOG_DIR" value="/home/logs/bdg01/admin"/>
    <!-- 定义服务名-->
    <property name="SERVER_NAME" value="admin"/>

    <!--  定义日志的输出格式  -->
    <property name="pattern_console"
              value="%green(%d{yyyy-MM-dd HH:mm:ss.SSS}) %highlight(%-5level) --- %boldMagenta([%15.15(%thread)]) %cyan(%-40.40(%logger{40})) : %msg%n"/>
    <property name="pattern_file"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level --- [%15.15(%thread)] %-40.40(%logger{40}) : %msg%n"/>
    <!--    <property name="pattern"-->
    <!--              value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level -&#45;&#45; [%15.15(%thread)] %-40.40(%logger{40}) : %msg%n"/>-->

    <!--
        Appender，附加器: 设置日志信息的去向,即写日志常用的有以下几个
            ch.qos.logback.core.ConsoleAppender (控制台)
            ch.qos.logback.core.rolling.RollingFileAppender (滚动记录日志，即先将文件记录到指定文件，达到条件后，再记录到新文件)
            ch.qos.logback.core.FileAppender (文件)
    -->
    <appender name="GELF" class="de.siegmar.logbackgelf.GelfUdpAppender">
        <!-- Graylog服务的地址 -->
        <graylogHost>ip</graylogHost>
        <!-- UDP Input端口 -->
        <graylogPort>12201</graylogPort>
        <!-- 最大GELF数据块大小（单位：字节），508为建议最小值，最大值为65467 -->
        <maxChunkSize>508</maxChunkSize>
        <!-- 是否使用压缩 -->
        <useCompression>true</useCompression>
        <encoder class="de.siegmar.logbackgelf.GelfEncoder">
            <!-- 是否发送原生的日志信息 -->
            <includeRawMessage>false</includeRawMessage>
            <includeMarker>true</includeMarker>
            <includeMdcData>true</includeMdcData>
            <includeCallerData>false</includeCallerData>
            <includeRootCauseData>false</includeRootCauseData>
            <!-- 是否发送日志级别的名称，否则默认以数字代表日志级别 -->
            <includeLevelName>true</includeLevelName>
            <shortPatternLayout class="ch.qos.logback.classic.PatternLayout">
                <pattern>%m%nopex</pattern>
            </shortPatternLayout>
            <fullPatternLayout class="ch.qos.logback.classic.PatternLayout">
                <pattern>%d - %-5level %logger{35} - %msg%n</pattern>
            </fullPatternLayout>

            <!-- 配置应用名称（服务名称），通过staticField标签可以自定义一些固定的日志字段 -->
            <staticField>app_name:graylog_test</staticField>
        </encoder>
    </appender>

    <!--  用于输出到控制台的appender  -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 字符串System.out（默认）或者System.err -->
        <target>System.out</target>
        <!-- 对记录事件进行格式化，也就是log的输出格式 -->
        <encoder>
            <pattern>${pattern_console}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--  用于输出到文件的debug日志  -->
    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建 -->
        <file>${LOG_DIR}/${SERVER_NAME}-debug.log</file>
        <!--  当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。属性class定义具体的滚动策略类 -->
        <!--有两个与RollingFileAppender交互的重要子组件。
        第一个：RollingPolicy:负责执行翻转所需的操作。
        第二个：TriggeringPolicy:将确定是否以及何时发生翻转。
        因此，RollingPolicy负责什么和TriggeringPolicy负责什么时候。作为任何用途，RollingFileAppender必须同时设置这两个组件，
        但是，如果其RollingPolicy也实现了TriggeringPolicy接口，则只需要显式指定前者。-->
        <!--  设置rollingPolicy为TimeBasedRollingPolicy，即只根据时间滚动日志  -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 必要节点，包含文件名及"%d"转换符，"%d"可以包含一个java.text.SimpleDateFormat指定的时间格式，默认格式是 yyyy-MM-dd -->
            <fileNamePattern>${LOG_DIR}/${SERVER_NAME}-debug-%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <!--  设置日志保存历史为60天，这个单位根据fileNamePattern中的日志格式推断，如果是yyyy-MM，单位则为月  -->
            <maxHistory>60</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${pattern_file}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!--        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
        <!--            <MaxFileSize>100MB</MaxFileSize>-->
        <!--        </triggeringPolicy>-->
        <!-- LevelFilter： 级别过滤器，根据日志级别进行过滤， -->
        <!--  如果命中debug，就使用这条，如果是其他日志，就抛弃-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <!-- 用于配置符合过滤条件的操作 ACCEPT：日志会被立即处理，不再经过剩余过滤器 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 用于配置不符合过滤条件的操作 DENY：日志将立即被抛弃不再经过其他过滤器 -->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--  用于输出到文件的INFO日志  -->
    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_DIR}/${SERVER_NAME}-info.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${LOG_DIR}/${SERVER_NAME}-info-%d{yyyy-MM-dd}.log.gz</FileNamePattern>
        </rollingPolicy>
        <encoder>
            <Pattern>${pattern_file}</Pattern>
            <charset>UTF-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--  用于输出到文件的WARN日志  -->
    <appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_DIR}/${SERVER_NAME}-warn.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_DIR}/${SERVER_NAME}-warn-%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <maxHistory>60</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern_file}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--  用于输出到文件的ERROR日志  -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_DIR}/${SERVER_NAME}-error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_DIR}/${SERVER_NAME}-error-%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <maxHistory>60</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern_file}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <!--
        记录器，用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
        <logger>仅有一个name属性，一个可选的level和一个可选的additivity属性
        name:
            用来指定受此logger约束的某一个包或者具体的某一个类。
        level:
            用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
            如果未设置此属性，那么当前logger将会继承上级的级别。
        additivity:
            是否向上级logger传递打印信息。默认是true。
        <logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger
    -->

    <!--
        根记录器，也就是全局日志级别，也是<logger>元素，但是它是根logger。默认debug,
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
        <root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。
        root的配置会被所有未指定additivity=false的logger继承
    -->
    <logger name="com.liteiot.admin.modules.admin.mapper" level="DEBUG" additivity="false">
        <appender-ref ref="STDOUT"></appender-ref>
        <appender-ref ref="DEBUG_FILE"></appender-ref>
    </logger>
    <root level="INFO">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="GELF"/>
        <appender-ref ref="INFO_FILE"/>
        <appender-ref ref="WARN_FILE"/>
        <appender-ref ref="ERROR_FILE"/>
    </root>

</configuration>